#!/usr/bin/bash
# Author : Shanika Amarasoma, Nuzla Ismail
# Date : October 23, 2024
# Description : Align reads to a reference sequence or graph
# Usage : mars-map.sh -f <reference fasta,fa file> -g <reference graph gbz file> -m <mapper> -r <read fq file 1> -r <read fq file 2> -t <no of threads>
# ./mars-map.sh -f NC_000020.11.fa -1 HG00096_reads_R1.fq.gz -2 HG00096_reads_R2.fq.gz -t 48 -m m
# ./mars-map.sh -g vgindex.giraffe.gbz -1 HG00096_reads_R1.fq.gz -2 HG00096_reads_R2.fq.gz -t 48 -m g

SHORT=f:,g:,m:,1:,2:,t:,w:,h
LONG=file:,gbz:,mapper:,read1:,read2:,threads:,write:,help
OPTS=$(getopt -a -n mars-map.sh --options $SHORT --longoptions $LONG -- "$@")

help_text="Usage: mars-map.sh [options]\n"
help_text+="-f | --file STR .fasta or .fa reference sequence file to map (If the mapper is not 'vg giraffe')\n"
help_text+="-g | --gbz STR reference graph .gbz file (e.g. generated by mars-graph.sh) if the mapper is 'vg giraffe' \n"
help_text+="-m | --mapper STR mapper/Aligner to use. 'm' for 'bwa mem', '2' for 'minimap2',\n
'mp' for 'bwa mem -x pacbio', 'mo' for 'bwa mem -x ont2d' (For single ended reads only),\n
's' for 'bwa sampe (Pared ended read), bwa samse (Single ended read)',\n
'2p' for 'minimap2 -ax map-pb', '2o' for 'minimap2 -ax map-ont', '2i' for 'minimap2 -ax map-iclr'  (Single ended read only),\n
'b' for 'bowtie2' and 'g' for 'vg giraffe'. (Default 'm')\n"
help_text+="-1 | --read1 STR pared read .fastq or .fq file 1 \n"
help_text+="-2 | --read2 STR pared read .fastq or .fq file 2 \n"
help_text+="-t | --threads INT number of threads to use (Default 'nproc')\n"
help_text+="-w | --write STR write logs to this file (optional, default 'mars.log')\n"
help_text+="-h | --help Display this help message\n"

eval set -- "$OPTS"
while :
do
    case "$1" in
        -f | --file )
            file="$2"
            shift 2
        ;;
        -g | --gbz )
            gbz="$2"
            shift 2
        ;;
        -m | --mapper )
            mapper="$2"
            shift 2
        ;;
        -1 | --read1 )
            read1="$2"
            shift 2
        ;;
        -2 | --read2 )
            read2="$2"
            shift 2
        ;;
        -t | --threads )
            threads="$2"
            shift 2
        ;;
        -w | --write )
            write="$2"
            shift 2
        ;;
        -h | --help )
            echo "Program : mars-map.sh"
            echo "Version : 1.0"
            echo -e $help_text
            exit 2
        ;;
        --)
            shift;
            break
        ;;
        *)
            echo "Unexpected option: $1";
            exit 2
        ;;
    esac
done

# exit when any command fails
set -e

#Get present working directory
pwd=$(pwd)
#Log file
if [ -z "$write" ] ; then
    write='mars.log'
    elif ! [[ $write =~ ^[0-9a-zA-Z._-]+$ ]]; then
    echo "Invalid log file name !"
    echo -e $help_text
    exit 1;
fi
log="${pwd}/${write}"

#Function to print and log messages
function mlog(){
    echo $1;
    echo $1 >> $log
}
mlog " "
#Get Date
d=$(date)

mlog ">>> Starting mars-reads workflow on ${d} ..."
mlog ">>> Checking for mars.sif ..."
if [ -z "$MARSSIF" ] ; then
    sif="${pwd}/mars.sif"
else
    sif="${MARSSIF%/}/mars.sif"
fi
sif=$(realpath $sif);

if [ -z "$sif" ] ; then
    mlog "The sif file ${file} does not exists. Please specify the path by MARSSIF env variable."
    exit 1;
fi

if [ -z $mapper ]; then
    mapper="m";
fi

mlog ">>> Starting mars-map workflow on ${d} ..."

if [[ $mapper == 'g' ]] ; then
    mlog "Mapper is 'vg giraffe'"
    mlog ">>> Checking for gbz file ..."
    
    if [ -z "$gbz" ] || [ ! -f "$gbz" ]; then
        mlog "The .gbz file ${gbz} does not exists or not specified by -g|--gbz <filename> !"
        echo -e $help_text
        exit 1;
    fi
    gbz=$(realpath $gbz)
else
    mlog ">>> Checking for sequence fasta file ..."
    
    if [ -z "$file" ] || [ ! -f "$file" ]; then
        mlog "The fasta file ${file} does not exists or not specified by -f|--file <filename> !"
        echo -e $help_text
        exit 1;
    fi
    
    file=$(realpath $file)
    
    mlog ">>> Checking the index file for $(basename ${file}) ..."
    if [ ! -f "${file}.fai" ]; then
        mlog ">>> Index file does not exists. Creating it..."
        singularity exec -e -B ${pwd} $sif samtools faidx $file;
    fi
fi

if [ -z "$read1" ] || [ ! -f "$read1" ]; then
    mlog "The fastq file 1 ${read1} does not exists or not specified by -1|--read1 <filename> !"
    echo -e $help_text
    exit 1;
fi

read1=$(realpath $read1)

if [ ! -z "$read2" ] && [ ! -f "$read2" ]; then
    mlog "The fastq file 2 ${read2} does not exists!"
    echo -e $help_text
    exit 1;
fi

if [ -f "$read2" ]; then
    read2=$(realpath $read2)
fi

re='^[0-9]+$'
if [ -z $threads ]; then
    threads=$(nproc);
    mlog "No number of threads are specified. Assigning default nproc=${threads}";
fi
if ! [[ $threads =~ $re ]] ; then
    echo "--threads must be an integer !"; exit 1;
fi

#This is for paired read
if [ -f "$read2" ]; then
    prefix=$(basename ${read1%_reads*})
    if [[ $mapper == 'm' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"bwa mem\"";
        singularity exec -e -B ${pwd} $sif bwa mem -t $threads -R "@RG\tID:${prefix}\tSM:${prefix}\tLB:L1" "${file}" "${read1}" "${read2}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == 's' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"bwa sampe\"";
        singularity exec -e -B ${pwd} $sif bwa aln "${file}" "${read1}" > "${read1}.sai"
        singularity exec -e -B ${pwd} $sif bwa aln "${file}" "${read2}" > "${read2}.sai"
        singularity exec -e -B ${pwd} $sif bwa sampe -r "@RG\tID:${prefix}\tSM:${prefix}\tLB:L1" "${file}" "${read1}.sai" "${read2}.sai" "${read1}" "${read2}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == 'b' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"bowtie2\"";
        singularity exec -e -B ${pwd} $sif bowtie2-build "${file}" "${file}.bt2-idx"
        singularity exec -e -B ${pwd} $sif bowtie2 -x "${file}.bt2-idx" -p $threads --rg-id $prefix --rg "SM:${prefix}" --rg "LB:${prefix}" -1 "${read1}" -2 "${read2}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == '2' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"minimap2\"";
        singularity exec -e -B ${pwd} $sif minimap2 -ax sr "${file}" "${read1}" "${read2}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == 'g' ]] ; then
        mlog ">>> Aligning reads to the graph \"$(basename $gbz)\" using \"vg giraffe\"";
        singularity exec -e -B ${pwd} $sif vg giraffe -t $threads -Z $gbz -D 150 --fragment-mean 150 --fragment-stdev 0 -f "${read1}" -f "${read2}" > "${pwd}/${prefix}.gam"
    else
        mlog "Invalid option \"${mapper}\" for --mapper!"
        echo -e $help_text
        exit 1;
    fi
    # This is for single ended reads
else
    prefix=$(basename ${read1%_long*})
    if [[ $mapper == 'm' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"bwa mem\"";
        singularity exec -e -B ${pwd} $sif bwa mem -t $threads -R "@RG\tID:${prefix}\tSM:${prefix}\tLB:L1" "${file}" "${read1}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == 'mp' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"bwa mem -x pacbio\"";
        singularity exec -e -B ${pwd} $sif bwa mem -x pacbio -t $threads -R "@RG\tID:${prefix}\tSM:${prefix}\tLB:L1" "${file}" "${read1}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == 'mo' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"bwa mem -x ont2d\"";
        singularity exec -e -B ${pwd} $sif bwa mem -x ont2d -t $threads -R "@RG\tID:${prefix}\tSM:${prefix}\tLB:L1" "${file}" "${read1}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == 's' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"bwa samse\"";
        singularity exec -e -B ${pwd} $sif bwa aln "${file}" "${read1}" > "${read1}.sai"
        singularity exec -e -B ${pwd} $sif bwa samse -r "@RG\tID:${prefix}\tSM:${prefix}\tLB:L1" "${file}" "${read1}.sai" "${read1}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == 'b' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"bowtie2\"";
        singularity exec -e -B ${pwd} $sif bowtie2-build "${file}" "${file}.bt2-idx"
        singularity exec -e -B ${pwd} $sif bowtie2 -x "${file}.bt2-idx" -p $threads --rg-id $prefix --rg "SM:${prefix}" --rg "LB:${prefix}" -1 "${read1}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == '2p' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"minimap2 -ax map-pb\" (PacBio CLR reads)";
        singularity exec -e -B ${pwd} $sif minimap2 -ax map-pb "${file}" "${read1}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == '2o' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"minimap2 -ax map-ont\" (Oxford Nanopore reads)";
        singularity exec -e -B ${pwd} $sif minimap2 -ax map-ont "${file}" "${read1}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == '2i' ]] ; then
        mlog ">>> Aligning reads to the reference \"$(basename $file)\" using \"minimap2 -ax map-iclr\" (Illumina Complete Long Reads)";
        singularity exec -e -B ${pwd} $sif minimap2 -ax map-iclr "${file}" "${read1}" | singularity exec -e -B ${pwd} $sif samtools sort - > "${pwd}/${prefix}.bam"
    elif [[ $mapper == 'g' ]] ; then
        mlog ">>> Aligning reads to the graph \"$(basename $gbz)\" using \"vg giraffe\"";
        singularity exec -e -B ${pwd} $sif vg giraffe -t $threads -Z $gbz -D 150 --fragment-mean 150 --fragment-stdev 0 -f "${read1}" > "${pwd}/${prefix}.gam"
    else
        mlog "Unknown option \"${mapper}\" for --mapper!"
        echo -e $help_text
        exit 1;
    fi
fi

if [[ $mapper != 'g' ]] ; then
    mlog ">>> Creating and index for the ${prefix}.bam file"
    singularity exec -e -B ${pwd} $sif tabix -f "${pwd}/${prefix}.bam"
fi

d=$(date)
mlog ">>> Done mars-map on ${d} !";
